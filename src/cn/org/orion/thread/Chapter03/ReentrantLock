##ReentrantLock

###ReentrantLock的几个重要方法：

- lock(): 获得锁, 如果锁已经被占用, 则等待
- lockInterruptibly(): 获得锁, 但优先响应中断
- tryLock(): 尝试获得锁, 如果成功, 返回true, 失败返回false. 该方法不等待, 立即返回
- tryLock(long time, TimeUnit unit): 在给定时间内尝试获得锁
- unlock(): 释放锁

###ReentrantLock的好搭档： Condition条件

- await(): 会使当前线程等待, 同时释放当前锁, 当其他线程中使用 signal()或者 signalAll()方法时, 线程会重新获得锁并继续执行. 或者当线程被中断时, 也能跳出等待. 这和 Object.wait()方法很相似
- awaitUninterruptibly()： 与 await()方法基本相同, 但是它并不会在等待过程中响应中断
- signal(): 用于唤醒一个在等待中的线程. 相对的 signalAll()方法会唤醒所有在等待中的线程. 这和 Object.notify()方法很类似